# -*- coding: utf-8 -*-
"""p1 data science 201554

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12Ylmwo1W2ACqyJykhqY5VsATtpPJ_5Bt
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import accuracy_score

data = pd.read_csv('indian_liver_patient.csv')
data

data.info()

data.describe()

plt.figure(figsize=(10, 6))
sns.heatmap(data.corr(), annot=True)

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

data  = data.apply(le.fit_transform)
data

data = data.drop(['Age', 'Gender'], axis=1)
data

x = data.drop('Dataset', axis=1)
y = data['Dataset']

from sklearn.preprocessing import MinMaxScaler
scaling = MinMaxScaler()
data = scaling.fit_transform(data)
data = pd.DataFrame(data)
data

plt.figure(figsize=(10, 6))
sns.heatmap(x.corr(), annot=True)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.9, random_state=42)

from lightgbm import LGBMClassifier
bgm_model = LGBMClassifier(learning_rate=0.09)
bgm_model.fit(x_train, y_train)
bgm_y_pred = bgm_model.predict(x_test)
accuracy_score(y_test, bgm_y_pred)

from sklearn.linear_model import SGDClassifier

sgd_model = SGDClassifier(penalty='elasticnet', random_state=3)
sgd_model.fit(x_train, y_train)
sgd_y_pred = sgd_model.predict(x_test)
accuracy_score(y_test, sgd_y_pred)

from sklearn.decomposition import PCA
pca = PCA(n_components = 8)
pca.fit(x)
x_pca = pca.transform(x)

plt.figure(figsize =(8, 6))
  
plt.scatter(x_pca[:, 0], x_pca[:, 1], c = y, cmap ='plasma')
  
# labeling x and y axes
plt.xlabel('First Principal Component')
plt.ylabel('Second Principal Component')

df_x_pca = pd.DataFrame(x_pca)
sns.heatmap(df_x_pca.corr())

x_train, x_test, y_train, y_test = train_test_split(x_pca, y, test_size=0.2, random_state=1)

from sklearn.tree import DecisionTreeClassifier
decision_model = DecisionTreeClassifier(max_depth=5, random_state=10)
decision_model.fit(x_train, y_train)
decision_y_pred = decision_model.predict(x_test)
accuracy_score(y_test, decision_y_pred)

from lightgbm import LGBMClassifier
bgm_model = LGBMClassifier(learning_rate=0.09)
bgm_model.fit(x_train, y_train)
bgm_y_pred = bgm_model.predict(x_test)
accuracy_score(y_test, bgm_y_pred)

# OBSERVATION:
# FORM THIS DATASET WE CAN PREDICT WHETHER THE PATIENT HAVE LIVER DISEASE OR NOT.